/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package detectingphishingurl;

import javax.swing.table.DefaultTableModel;
import java.net.URL;
import java.security.cert.Certificate;
import java.security.cert.CertificateExpiredException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Vector;
import javax.net.ssl.HttpsURLConnection;
import org.apache.commons.validator.routines.UrlValidator;

/**
 *
 * @author Elcot
 */
public class HPBAFrame extends javax.swing.JFrame {

    /**
     * Creates new form HBAFrame
     */
    
    public static ArrayList urlonly=new ArrayList();
    public static ArrayList resultonly=new ArrayList();
    
    public HPBAFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Host & Page Based  Analysis");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(278, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(262, 262, 262))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Host & Page Based  Analysis");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "URL", "Status", "Reason"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Machine Learning Algorithms");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        String dataset=MainFrame.dataset;
        String sp[]=dataset.trim().split("\n");
        
        System.out.println("Total URLs: "+sp.length);
        
        for(int i=0;i<sp.length;i++)
        {
            System.out.println(i);
            String url=sp[i].trim();
            urlonly.add(url.trim());
            String status="Benign";
            String reason="-";
            
            int lastIndex=url.lastIndexOf("//");
            int atCount = url.length() - url.replace("@", "").length();
            if(atCount>0)       // noof@symbol>0 is phishing
            {
                status="Phishing";
                reason="@ Symbol is occured in URL!";                
            }
            else if(url.length()>75)    // Long URL is phishing
            {
                status="Phishing";
                reason="URL Length is too Large (above 75 Characters)!";                
            }
            else if((url.length()>=54)&&(url.length()<=75)) // URL is greater than or equal 54 characters may be phishing
            {
                status="Possible Phishing";
                reason="URL Length is between 54 to 75 Characters!!";                
            }
            else if(lastIndex > 7)  // Redirecting using “//” is phishing
            {
                status="Phishing";
                reason="The Position of the Last Occurrence of \"//\" in the URL is above 7!";                
            }
            else if(ip(url.trim()))
            {
                status="Phishing";
                reason="URL Contains IP Address!";                
            }
            else if(SSLCertificateBasedDetection(url.trim())==false)
            {
                status="Phishing";
                reason="SSL Certificate is Not Secure!"; 
            }
            else if(DNSBasedDetection(url.trim())==false)
            {
                status="Phishing";
                reason="DNS URL is Malicious!"; 
            }
            
            DefaultTableModel dm=(DefaultTableModel)jTable1.getModel();
            Vector v=new Vector();
            v.add(url.trim());
            v.add(status.trim());
            v.add(reason.trim());
            dm.addRow(v);
            
            resultonly.add(status.trim());
        }        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        MLAFrame mf=new MLAFrame();
        mf.setVisible(true);
        mf.setTitle("Machine Learning Algorithms");
        mf.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HPBAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HPBAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HPBAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HPBAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HPBAFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public boolean ip(String a_text) 
    {
        String ip_filter = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}";
        if (a_text.toLowerCase().contains(ip_filter.toLowerCase())){
            return true;
        }
        return false;
    }        

    private boolean SSLCertificateBasedDetection(String url) {
        System.out.println("=======================================================");
        System.out.println("URL: "+url.trim());
        boolean result=true;
        try
        {
            /* URL detection by SSL certificate */
            
            URL destinationURL = new URL(url);
            HttpsURLConnection conn = (HttpsURLConnection) destinationURL.openConnection();
            conn.connect();
            Certificate[] certs = conn.getServerCertificates();
            for (Certificate cert : certs) 
            {
                System.out.println("SSL Certificate is: " + cert);
                if(cert instanceof X509Certificate) 
                {
                    try 
                    {
                        ((X509Certificate) cert).checkValidity();
                        System.out.println("SSL Certificate is Secure & active for current date");
                        result=true;
                    } 
                    catch(CertificateExpiredException cee) 
                    {
                        System.out.println("SSL Certificate is expired");
                        result=false;
                    }
                }
            }
        }
        catch(Exception e)
        {
            result=false;
            System.out.println("SSL Certificate is Not Secure!");
        } 
        return result;
    }

    private boolean DNSBasedDetection(String url) {
        System.out.println("=======================================================");
        System.out.println("URL: "+url.trim());
        boolean result=true;
        
        UrlValidator urlValidator = new UrlValidator();
        if (urlValidator.isValid(url.trim())) 
        {
            System.out.println("URL is Secure");
            result=true;
        } 
        else 
        {
            System.out.println("URL is Malicious");
            result=false;
        }
        
        return result;
    }
}
